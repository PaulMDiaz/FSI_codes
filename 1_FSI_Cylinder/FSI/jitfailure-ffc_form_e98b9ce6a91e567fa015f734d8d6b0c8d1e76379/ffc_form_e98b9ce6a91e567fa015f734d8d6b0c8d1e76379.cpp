// This code conforms with the UFC specification version 2017.2.0
// and was automatically generated by FFC version 2017.2.0.
//
// This code was generated with the following parameters:
//

//  add_tabulate_tensor_timing:     False
//  convert_exceptions_to_warnings: False
//  cpp_optimize:                   True
//  cpp_optimize_flags:             '-O2'
//  epsilon:                        1e-14
//  error_control:                  False
//  external_include_dirs:          ''
//  external_includes:              ''
//  external_libraries:             ''
//  external_library_dirs:          ''
//  form_postfix:                   False
//  format:                         'ufc'
//  generate_dummy_tabulate_tensor: False
//  max_signature_length:           0
//  no-evaluate_basis_derivatives:  True
//  optimize:                       True
//  precision:                      None
//  quadrature_degree:              None
//  quadrature_rule:                None
//  representation:                 'uflacs'
//  split:                          False

#include "ffc_form_e98b9ce6a91e567fa015f734d8d6b0c8d1e76379.h"

// Based on https://gcc.gnu.org/wiki/Visibility
#if defined _WIN32 || defined __CYGWIN__
    #ifdef __GNUC__
        #define DLL_EXPORT __attribute__ ((dllexport))
    #else
        #define DLL_EXPORT __declspec(dllexport)
    #endif
#else
    #define DLL_EXPORT __attribute__ ((visibility ("default")))
#endif

ffc_form_e98b9ce6a91e567fa015f734d8d6b0c8d1e76379_cell_integral_main_otherwise::ffc_form_e98b9ce6a91e567fa015f734d8d6b0c8d1e76379_cell_integral_main_otherwise() : ufc::cell_integral()
{

}

ffc_form_e98b9ce6a91e567fa015f734d8d6b0c8d1e76379_cell_integral_main_otherwise::~ffc_form_e98b9ce6a91e567fa015f734d8d6b0c8d1e76379_cell_integral_main_otherwise()
{

}

const std::vector<bool> & ffc_form_e98b9ce6a91e567fa015f734d8d6b0c8d1e76379_cell_integral_main_otherwise::enabled_coefficients() const
{
static const std::vector<bool> enabled({true, true, true, true, true, true});
return enabled;
}

void ffc_form_e98b9ce6a91e567fa015f734d8d6b0c8d1e76379_cell_integral_main_otherwise::tabulate_tensor(double * A,
                                    const double * const * w,
                                    const double * coordinate_dofs,
                                    int cell_orientation) const
{
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    // num_cells:         None
    // optimize:          True
    // precision:         16
    // quadrature_degree: 2
    // quadrature_rule:   'default'
    // representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    // estimated_polynomial_degree: 2
    // optimize:                    True
    // precision:                   16
    // quadrature_degree:           2
    // quadrature_rule:             'default'
    // representation:              'uflacs'
    // Quadrature rules
    alignas(32) static const double weights3[3] = { 0.1666666666666667, 0.1666666666666667, 0.1666666666666667 };
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE20_C0_D01_Q3[1][1][2] = { { { -1.0, 1.0 } } };
    alignas(32) static const double FE20_C0_Q3[1][3][3] =
        { { { 0.6666666666666669, 0.1666666666666666, 0.1666666666666667 },
            { 0.1666666666666667, 0.1666666666666666, 0.6666666666666665 },
            { 0.1666666666666667, 0.6666666666666666, 0.1666666666666666 } } };
    alignas(32) static const double FE7_C0_D01_Q3[1][3][5] =
        { { { -1.666666666666672, -0.3333333333333325, 0.6666666666666556, 2.000000000000008, -0.6666666666666662 },
            { 0.3333333333333277, 1.666666666666669, 0.6666666666666518, -1.99999999999999, -0.6666666666666656 },
            { 0.3333333333333283, -0.3333333333333324, 2.666666666666653, 0.0, -2.666666666666668 } } };
    alignas(32) static const double FE7_C0_D10_Q3[1][3][5] =
        { { { -1.666666666666667, -0.3333333333333356, 0.6666666666666653, -0.6666666666666653, 2.000000000000003 },
            { 0.3333333333333331, -0.3333333333333336, 2.666666666666663, -2.666666666666663, 0.0 },
            { 0.3333333333333349, 1.666666666666666, 0.6666666666666651, -0.6666666666666651, -2.000000000000001 } } };
    // Unstructured piecewise computations
    const double w0_d1_c1 = w[0][3] * FE20_C0_D01_Q3[0][0][0] + w[0][5] * FE20_C0_D01_Q3[0][0][1];
    const double J_c0 = coordinate_dofs[0] * FE20_C0_D01_Q3[0][0][0] + coordinate_dofs[2] * FE20_C0_D01_Q3[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE20_C0_D01_Q3[0][0][0] + coordinate_dofs[5] * FE20_C0_D01_Q3[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE20_C0_D01_Q3[0][0][0] + coordinate_dofs[4] * FE20_C0_D01_Q3[0][0][1];
    const double J_c2 = coordinate_dofs[1] * FE20_C0_D01_Q3[0][0][0] + coordinate_dofs[3] * FE20_C0_D01_Q3[0][0][1];
    double w0_d0_c1 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w0_d0_c1 += w[0][ic + 3] * FE20_C0_D01_Q3[0][0][ic];
    double w0_d0_c0 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w0_d0_c0 += w[0][ic] * FE20_C0_D01_Q3[0][0][ic];
    const double w0_d1_c0 = w[0][0] * FE20_C0_D01_Q3[0][0][0] + w[0][2] * FE20_C0_D01_Q3[0][0][1];
    const double J_c0 = coordinate_dofs[0] * FE20_C0_D01_Q3[0][0][0] + coordinate_dofs[2] * FE20_C0_D01_Q3[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE20_C0_D01_Q3[0][0][0] + coordinate_dofs[5] * FE20_C0_D01_Q3[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE20_C0_D01_Q3[0][0][0] + coordinate_dofs[4] * FE20_C0_D01_Q3[0][0][1];
    const double J_c2 = coordinate_dofs[1] * FE20_C0_D01_Q3[0][0][0] + coordinate_dofs[3] * FE20_C0_D01_Q3[0][0][1];
    alignas(32) double sp[30];
    sp[0] = J_c0 * J_c3;
    sp[1] = J_c1 * J_c2;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = J_c0 / sp[2];
    sp[4] = w0_d1_c1 * sp[3];
    sp[5] = -1 * J_c1 / sp[2];
    sp[6] = w0_d0_c1 * sp[5];
    sp[7] = sp[4] + sp[6];
    sp[8] = J_c3 / sp[2];
    sp[9] = w0_d0_c0 * sp[8];
    sp[10] = -1 * J_c2 / sp[2];
    sp[11] = w0_d1_c0 * sp[10];
    sp[12] = sp[9] + sp[11];
    sp[13] = (1 + sp[7]) * (1 + sp[12]);
    sp[14] = w0_d1_c0 * sp[3];
    sp[15] = w0_d0_c0 * sp[5];
    sp[16] = sp[14] + sp[15];
    sp[17] = w0_d0_c1 * sp[8];
    sp[18] = w0_d1_c1 * sp[10];
    sp[19] = sp[17] + sp[18];
    sp[20] = sp[16] * sp[19];
    sp[21] = sp[13] + -1 * sp[20];
    sp[22] = (1 + sp[12]) / sp[21];
    sp[23] = -1 * sp[16] / sp[21];
    sp[24] = (1 + sp[7]) / sp[21];
    sp[25] = -1 * sp[19] / sp[21];
    sp[26] = J_c0 * J_c3;
    sp[27] = J_c1 * J_c2;
    sp[28] = sp[26] + -1 * sp[27];
    sp[29] = std::abs(sp[28]);
    alignas(32) double BF0[3] = {};
    alignas(32) double BF1[3] = {};
    alignas(32) double BF2[3] = {};
    alignas(32) double BF3[3] = {};
    for (int iq = 0; iq < 3; ++iq)
    {
        // Quadrature loop body setup (num_points=3)
        // Unstructured varying computations for num_points=3
        const double w1_d1_c0 = w[1][0] * FE7_C0_D01_Q3[0][iq][0] + w[1][2] * FE7_C0_D01_Q3[0][iq][1] + w[1][3] * FE7_C0_D01_Q3[0][iq][2] + w[1][4] * FE7_C0_D01_Q3[0][iq][3] + w[1][5] * FE7_C0_D01_Q3[0][iq][4];
        const double w1_d0_c0 = w[1][0] * FE7_C0_D10_Q3[0][iq][0] + w[1][1] * FE7_C0_D10_Q3[0][iq][1] + w[1][3] * FE7_C0_D10_Q3[0][iq][2] + w[1][4] * FE7_C0_D10_Q3[0][iq][3] + w[1][5] * FE7_C0_D10_Q3[0][iq][4];
        const double w2_d1_c0 = w[2][0] * FE7_C0_D01_Q3[0][iq][0] + w[2][2] * FE7_C0_D01_Q3[0][iq][1] + w[2][3] * FE7_C0_D01_Q3[0][iq][2] + w[2][4] * FE7_C0_D01_Q3[0][iq][3] + w[2][5] * FE7_C0_D01_Q3[0][iq][4];
        const double w2_d0_c0 = w[2][0] * FE7_C0_D10_Q3[0][iq][0] + w[2][1] * FE7_C0_D10_Q3[0][iq][1] + w[2][3] * FE7_C0_D10_Q3[0][iq][2] + w[2][4] * FE7_C0_D10_Q3[0][iq][3] + w[2][5] * FE7_C0_D10_Q3[0][iq][4];
        const double w1_d0_c1 = w[1][6] * FE7_C0_D10_Q3[0][iq][0] + w[1][7] * FE7_C0_D10_Q3[0][iq][1] + w[1][9] * FE7_C0_D10_Q3[0][iq][2] + w[1][10] * FE7_C0_D10_Q3[0][iq][3] + w[1][11] * FE7_C0_D10_Q3[0][iq][4];
        const double w1_d1_c1 = w[1][6] * FE7_C0_D01_Q3[0][iq][0] + w[1][8] * FE7_C0_D01_Q3[0][iq][1] + w[1][9] * FE7_C0_D01_Q3[0][iq][2] + w[1][10] * FE7_C0_D01_Q3[0][iq][3] + w[1][11] * FE7_C0_D01_Q3[0][iq][4];
        const double w2_d0_c1 = w[2][6] * FE7_C0_D10_Q3[0][iq][0] + w[2][7] * FE7_C0_D10_Q3[0][iq][1] + w[2][9] * FE7_C0_D10_Q3[0][iq][2] + w[2][10] * FE7_C0_D10_Q3[0][iq][3] + w[2][11] * FE7_C0_D10_Q3[0][iq][4];
        const double w2_d1_c1 = w[2][6] * FE7_C0_D01_Q3[0][iq][0] + w[2][8] * FE7_C0_D01_Q3[0][iq][1] + w[2][9] * FE7_C0_D01_Q3[0][iq][2] + w[2][10] * FE7_C0_D01_Q3[0][iq][3] + w[2][11] * FE7_C0_D01_Q3[0][iq][4];
        double w3 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w3 += w[3][ic] * FE20_C0_Q3[0][iq][ic];
        double w4 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w4 += w[4][ic] * FE20_C0_Q3[0][iq][ic];
        alignas(32) double sv3[68];
        sv3[0] = w1_d1_c0 * sp[3];
        sv3[1] = w1_d0_c0 * sp[5];
        sv3[2] = sv3[0] + sv3[1];
        sv3[3] = w2_d1_c0 * sp[3];
        sv3[4] = w2_d0_c0 * sp[5];
        sv3[5] = sv3[3] + sv3[4];
        sv3[6] = sv3[2] + sv3[5];
        sv3[7] = 0.5 * sv3[6] * sp[22];
        sv3[8] = w1_d0_c0 * sp[8];
        sv3[9] = w1_d1_c0 * sp[10];
        sv3[10] = sv3[8] + sv3[9];
        sv3[11] = w2_d0_c0 * sp[8];
        sv3[12] = w2_d1_c0 * sp[10];
        sv3[13] = sv3[11] + sv3[12];
        sv3[14] = sv3[10] + sv3[13];
        sv3[15] = 0.5 * sv3[14] * sp[23];
        sv3[16] = sv3[7] + sv3[15];
        sv3[17] = w1_d0_c1 * sp[8];
        sv3[18] = w1_d1_c1 * sp[10];
        sv3[19] = sv3[17] + sv3[18];
        sv3[20] = w2_d0_c1 * sp[8];
        sv3[21] = w2_d1_c1 * sp[10];
        sv3[22] = sv3[20] + sv3[21];
        sv3[23] = sv3[19] + sv3[22];
        sv3[24] = 0.5 * sv3[23] * sp[24];
        sv3[25] = w1_d1_c1 * sp[3];
        sv3[26] = w1_d0_c1 * sp[5];
        sv3[27] = sv3[25] + sv3[26];
        sv3[28] = w2_d1_c1 * sp[3];
        sv3[29] = w2_d0_c1 * sp[5];
        sv3[30] = sv3[28] + sv3[29];
        sv3[31] = sv3[27] + sv3[30];
        sv3[32] = 0.5 * sv3[31] * sp[25];
        sv3[33] = sv3[24] + sv3[32];
        sv3[34] = sv3[16] + sv3[33];
        sv3[35] = sv3[34] * w[5][0];
        sv3[36] = sp[21] * sv3[35];
        sv3[37] = sv3[36] * sp[24];
        sv3[38] = w3 + w4;
        sv3[39] = 0.5 * sv3[31] * sp[22];
        sv3[40] = 0.5 * sv3[23] * sp[23];
        sv3[41] = sv3[39] + sv3[40];
        sv3[42] = sv3[41] + sv3[41];
        sv3[43] = sv3[42] * w[5][0];
        sv3[44] = -1 * (0.5 * sv3[38]) + sv3[43];
        sv3[45] = sp[21] * sv3[44];
        sv3[46] = sv3[45] * sp[23];
        sv3[47] = sv3[37] + sv3[46];
        sv3[48] = 0.5 * sv3[14] * sp[24];
        sv3[49] = 0.5 * sv3[6] * sp[25];
        sv3[50] = sv3[48] + sv3[49];
        sv3[51] = sv3[50] + sv3[50];
        sv3[52] = sv3[51] * w[5][0];
        sv3[53] = -1 * (0.5 * sv3[38]) + sv3[52];
        sv3[54] = sp[21] * sv3[53];
        sv3[55] = sv3[54] * sp[24];
        sv3[56] = sv3[36] * sp[23];
        sv3[57] = sv3[55] + sv3[56];
        sv3[58] = sv3[36] * sp[22];
        sv3[59] = sv3[54] * sp[25];
        sv3[60] = sv3[58] + sv3[59];
        sv3[61] = sv3[45] * sp[22];
        sv3[62] = sv3[36] * sp[25];
        sv3[63] = sv3[61] + sv3[62];
        sv3[64] = sv3[47] * sp[29];
        sv3[65] = sv3[57] * sp[29];
        sv3[66] = sv3[60] * sp[29];
        sv3[67] = sv3[63] * sp[29];
        const double fw0 = sv3[65] * weights3[iq];
        for (int i = 0; i < 3; ++i)
            BF0[i] += fw0 * FE20_C0_Q3[0][iq][i];
        const double fw1 = sv3[66] * weights3[iq];
        for (int i = 0; i < 3; ++i)
            BF1[i] += fw1 * FE20_C0_Q3[0][iq][i];
        const double fw2 = sv3[64] * weights3[iq];
        for (int i = 0; i < 3; ++i)
            BF2[i] += fw2 * FE20_C0_Q3[0][iq][i];
        const double fw3 = sv3[67] * weights3[iq];
        for (int i = 0; i < 3; ++i)
            BF3[i] += fw3 * FE20_C0_Q3[0][iq][i];
    }
    std::fill(A, A + 12, 0.0);
    for (int i = 0; i < 3; ++i)
        A[i] += BF0[i];
    for (int i = 0; i < 3; ++i)
        A[i + 3] += BF1[i];
    for (int i = 0; i < 3; ++i)
        A[i + 6] += BF2[i];
    for (int i = 0; i < 3; ++i)
        A[i + 9] += BF3[i];
}

extern "C" DLL_EXPORT ufc::cell_integral * create_ffc_form_e98b9ce6a91e567fa015f734d8d6b0c8d1e76379_cell_integral_main_otherwise()
{
  return new ffc_form_e98b9ce6a91e567fa015f734d8d6b0c8d1e76379_cell_integral_main_otherwise();
}


ffc_form_e98b9ce6a91e567fa015f734d8d6b0c8d1e76379_form_main::ffc_form_e98b9ce6a91e567fa015f734d8d6b0c8d1e76379_form_main() : ufc::form()
{
    // Do nothing
}

ffc_form_e98b9ce6a91e567fa015f734d8d6b0c8d1e76379_form_main::~ffc_form_e98b9ce6a91e567fa015f734d8d6b0c8d1e76379_form_main()
{
    // Do nothing
}

const char * ffc_form_e98b9ce6a91e567fa015f734d8d6b0c8d1e76379_form_main::signature() const
{
    return "25d10e5c3ad17ca63346ca7fc1ec9f256a5eb61333fedc8b92d0d9ffa378eabecd2dae1b5e3596b8f79a3fb4b593fbc601517a342958c10800b5d410df94a216";
}

std::size_t ffc_form_e98b9ce6a91e567fa015f734d8d6b0c8d1e76379_form_main::rank() const
{
    return 1;
}

std::size_t ffc_form_e98b9ce6a91e567fa015f734d8d6b0c8d1e76379_form_main::num_coefficients() const
{
    return 6;
}

std::size_t ffc_form_e98b9ce6a91e567fa015f734d8d6b0c8d1e76379_form_main::original_coefficient_position(std::size_t i) const
{
    if (i >= 6)
    {
        throw std::runtime_error("Invalid original coefficient index.");
    }
    static const std::vector<std::size_t> position = {0, 1, 2, 3, 4, 5};
    return position[i];
}

ufc::finite_element * ffc_form_e98b9ce6a91e567fa015f734d8d6b0c8d1e76379_form_main::create_coordinate_finite_element() const
{
    return create_ffc_element_9cf7e68458202e2f4ed24238374d8ced607cd91f_finite_element_main();
}

ufc::dofmap * ffc_form_e98b9ce6a91e567fa015f734d8d6b0c8d1e76379_form_main::create_coordinate_dofmap() const
{
    return create_ffc_element_9cf7e68458202e2f4ed24238374d8ced607cd91f_dofmap_main();
}

ufc::coordinate_mapping * ffc_form_e98b9ce6a91e567fa015f734d8d6b0c8d1e76379_form_main::create_coordinate_mapping() const
{
    return create_ffc_coordinate_mapping_c3d832a024922b1325765208cc8f2e745622e7c5_coordinate_mapping_main();
}

ufc::finite_element * ffc_form_e98b9ce6a91e567fa015f734d8d6b0c8d1e76379_form_main::create_finite_element(std::size_t i) const
{
    switch (i)
    {
    case 0:
        return create_ffc_element_9793a9e107b566df6bb4694e512b11836e915db6_finite_element_main();
    case 1:
        return create_ffc_element_9cf7e68458202e2f4ed24238374d8ced607cd91f_finite_element_main();
    case 2:
        return create_ffc_element_80839e4390606b67f653eea6a97ca756b43c7129_finite_element_main();
    case 3:
        return create_ffc_element_80839e4390606b67f653eea6a97ca756b43c7129_finite_element_main();
    case 4:
        return create_ffc_element_e86f7cfaa662cd0b0d1177d1bf6693edb1ebb6e4_finite_element_main();
    case 5:
        return create_ffc_element_e86f7cfaa662cd0b0d1177d1bf6693edb1ebb6e4_finite_element_main();
    case 6:
        return create_ffc_element_05fecf4733564f370c1af9a92d83b1066328e23d_finite_element_main();
    default:
        return nullptr;
    }
}

ufc::dofmap * ffc_form_e98b9ce6a91e567fa015f734d8d6b0c8d1e76379_form_main::create_dofmap(std::size_t i) const
{
    switch (i)
    {
    case 0:
        return create_ffc_element_9793a9e107b566df6bb4694e512b11836e915db6_dofmap_main();
    case 1:
        return create_ffc_element_9cf7e68458202e2f4ed24238374d8ced607cd91f_dofmap_main();
    case 2:
        return create_ffc_element_80839e4390606b67f653eea6a97ca756b43c7129_dofmap_main();
    case 3:
        return create_ffc_element_80839e4390606b67f653eea6a97ca756b43c7129_dofmap_main();
    case 4:
        return create_ffc_element_e86f7cfaa662cd0b0d1177d1bf6693edb1ebb6e4_dofmap_main();
    case 5:
        return create_ffc_element_e86f7cfaa662cd0b0d1177d1bf6693edb1ebb6e4_dofmap_main();
    case 6:
        return create_ffc_element_05fecf4733564f370c1af9a92d83b1066328e23d_dofmap_main();
    default:
        return nullptr;
    }
}

std::size_t ffc_form_e98b9ce6a91e567fa015f734d8d6b0c8d1e76379_form_main::max_cell_subdomain_id() const
{
    return 0;
}

std::size_t ffc_form_e98b9ce6a91e567fa015f734d8d6b0c8d1e76379_form_main::max_exterior_facet_subdomain_id() const
{
    return 0;
}

std::size_t ffc_form_e98b9ce6a91e567fa015f734d8d6b0c8d1e76379_form_main::max_interior_facet_subdomain_id() const
{
    return 0;
}

std::size_t ffc_form_e98b9ce6a91e567fa015f734d8d6b0c8d1e76379_form_main::max_vertex_subdomain_id() const
{
    return 0;
}

std::size_t ffc_form_e98b9ce6a91e567fa015f734d8d6b0c8d1e76379_form_main::max_custom_subdomain_id() const
{
    return 0;
}

std::size_t ffc_form_e98b9ce6a91e567fa015f734d8d6b0c8d1e76379_form_main::max_cutcell_subdomain_id() const
{
    return 0;
}

std::size_t ffc_form_e98b9ce6a91e567fa015f734d8d6b0c8d1e76379_form_main::max_interface_subdomain_id() const
{
    return 0;
}

std::size_t ffc_form_e98b9ce6a91e567fa015f734d8d6b0c8d1e76379_form_main::max_overlap_subdomain_id() const
{
    return 0;
}

bool ffc_form_e98b9ce6a91e567fa015f734d8d6b0c8d1e76379_form_main::has_cell_integrals() const
{
    return true;
}

bool ffc_form_e98b9ce6a91e567fa015f734d8d6b0c8d1e76379_form_main::has_exterior_facet_integrals() const
{
    return false;
}

bool ffc_form_e98b9ce6a91e567fa015f734d8d6b0c8d1e76379_form_main::has_interior_facet_integrals() const
{
    return false;
}

bool ffc_form_e98b9ce6a91e567fa015f734d8d6b0c8d1e76379_form_main::has_vertex_integrals() const
{
    return false;
}

bool ffc_form_e98b9ce6a91e567fa015f734d8d6b0c8d1e76379_form_main::has_custom_integrals() const
{
    return false;
}

bool ffc_form_e98b9ce6a91e567fa015f734d8d6b0c8d1e76379_form_main::has_cutcell_integrals() const
{
    return false;
}

bool ffc_form_e98b9ce6a91e567fa015f734d8d6b0c8d1e76379_form_main::has_interface_integrals() const
{
    return false;
}

bool ffc_form_e98b9ce6a91e567fa015f734d8d6b0c8d1e76379_form_main::has_overlap_integrals() const
{
    return false;
}

ufc::cell_integral * ffc_form_e98b9ce6a91e567fa015f734d8d6b0c8d1e76379_form_main::create_cell_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::exterior_facet_integral * ffc_form_e98b9ce6a91e567fa015f734d8d6b0c8d1e76379_form_main::create_exterior_facet_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::interior_facet_integral * ffc_form_e98b9ce6a91e567fa015f734d8d6b0c8d1e76379_form_main::create_interior_facet_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::vertex_integral * ffc_form_e98b9ce6a91e567fa015f734d8d6b0c8d1e76379_form_main::create_vertex_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::custom_integral * ffc_form_e98b9ce6a91e567fa015f734d8d6b0c8d1e76379_form_main::create_custom_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::cutcell_integral * ffc_form_e98b9ce6a91e567fa015f734d8d6b0c8d1e76379_form_main::create_cutcell_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::interface_integral * ffc_form_e98b9ce6a91e567fa015f734d8d6b0c8d1e76379_form_main::create_interface_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::overlap_integral * ffc_form_e98b9ce6a91e567fa015f734d8d6b0c8d1e76379_form_main::create_overlap_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::cell_integral * ffc_form_e98b9ce6a91e567fa015f734d8d6b0c8d1e76379_form_main::create_default_cell_integral() const
{
    return create_ffc_form_e98b9ce6a91e567fa015f734d8d6b0c8d1e76379_cell_integral_main_otherwise();
}

ufc::exterior_facet_integral * ffc_form_e98b9ce6a91e567fa015f734d8d6b0c8d1e76379_form_main::create_default_exterior_facet_integral() const
{
    return nullptr;
}

ufc::interior_facet_integral * ffc_form_e98b9ce6a91e567fa015f734d8d6b0c8d1e76379_form_main::create_default_interior_facet_integral() const
{
    return nullptr;
}

ufc::vertex_integral * ffc_form_e98b9ce6a91e567fa015f734d8d6b0c8d1e76379_form_main::create_default_vertex_integral() const
{
    return nullptr;
}

ufc::custom_integral * ffc_form_e98b9ce6a91e567fa015f734d8d6b0c8d1e76379_form_main::create_default_custom_integral() const
{
    return nullptr;
}

ufc::cutcell_integral * ffc_form_e98b9ce6a91e567fa015f734d8d6b0c8d1e76379_form_main::create_default_cutcell_integral() const
{
    return nullptr;
}

ufc::interface_integral * ffc_form_e98b9ce6a91e567fa015f734d8d6b0c8d1e76379_form_main::create_default_interface_integral() const
{
    return nullptr;
}

ufc::overlap_integral * ffc_form_e98b9ce6a91e567fa015f734d8d6b0c8d1e76379_form_main::create_default_overlap_integral() const
{
    return nullptr;
}

extern "C" DLL_EXPORT ufc::form * create_ffc_form_e98b9ce6a91e567fa015f734d8d6b0c8d1e76379_form_main()
{
  return new ffc_form_e98b9ce6a91e567fa015f734d8d6b0c8d1e76379_form_main();
}

